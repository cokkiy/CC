// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.5
//
// <auto-generated>
//
// Generated from file `IAppLuncher.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace AppController
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface ILuncher : Ice.Object, ILuncherOperations_, ILuncherOperationsNC_
    {
    }
}

namespace AppController
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public delegate void Callback_ILuncher_startApp(_System.Collections.Generic.List<CC.AppStartingResult> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public delegate void Callback_ILuncher_closeApp(_System.Collections.Generic.List<CC.AppControlResult> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public delegate void Callback_ILuncher_restartApp(_System.Collections.Generic.List<CC.AppStartingResult> ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public delegate void Callback_ILuncher_captureScreen(bool ret__, int length, byte[] data);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public delegate void Callback_ILuncher_getAppLuncherVersion(CC.Version ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public delegate void Callback_ILuncher_getAppLuncherPath(string ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public delegate void Callback_ILuncher_getCurrentUser(string ret__);
}

namespace AppController
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public interface ILuncherPrx : Ice.ObjectPrx
    {
        _System.Collections.Generic.List<CC.AppStartingResult> startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams);

        _System.Collections.Generic.List<CC.AppStartingResult> startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<AppController.Callback_ILuncher_startApp> begin_startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams);

        Ice.AsyncResult<AppController.Callback_ILuncher_startApp> begin_startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.List<CC.AppStartingResult> end_startApp(Ice.AsyncResult r__);

        _System.Collections.Generic.List<CC.AppControlResult> closeApp(_System.Collections.Generic.List<int> processIdList);

        _System.Collections.Generic.List<CC.AppControlResult> closeApp(_System.Collections.Generic.List<int> processIdList, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<AppController.Callback_ILuncher_closeApp> begin_closeApp(_System.Collections.Generic.List<int> processIdList);

        Ice.AsyncResult<AppController.Callback_ILuncher_closeApp> begin_closeApp(_System.Collections.Generic.List<int> processIdList, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_closeApp(_System.Collections.Generic.List<int> processIdList, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_closeApp(_System.Collections.Generic.List<int> processIdList, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.List<CC.AppControlResult> end_closeApp(Ice.AsyncResult r__);

        _System.Collections.Generic.List<CC.AppStartingResult> restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams);

        _System.Collections.Generic.List<CC.AppStartingResult> restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<AppController.Callback_ILuncher_restartApp> begin_restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams);

        Ice.AsyncResult<AppController.Callback_ILuncher_restartApp> begin_restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        _System.Collections.Generic.List<CC.AppStartingResult> end_restartApp(Ice.AsyncResult r__);

        bool captureScreen(long position, out int length, out byte[] data);

        bool captureScreen(long position, out int length, out byte[] data, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<AppController.Callback_ILuncher_captureScreen> begin_captureScreen(long position);

        Ice.AsyncResult<AppController.Callback_ILuncher_captureScreen> begin_captureScreen(long position, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_captureScreen(long position, Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_captureScreen(long position, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_captureScreen(out int length, out byte[] data, Ice.AsyncResult r__);

        CC.Version getAppLuncherVersion();

        CC.Version getAppLuncherVersion(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<AppController.Callback_ILuncher_getAppLuncherVersion> begin_getAppLuncherVersion();

        Ice.AsyncResult<AppController.Callback_ILuncher_getAppLuncherVersion> begin_getAppLuncherVersion(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getAppLuncherVersion(Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_getAppLuncherVersion(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        CC.Version end_getAppLuncherVersion(Ice.AsyncResult r__);

        string getAppLuncherPath();

        string getAppLuncherPath(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<AppController.Callback_ILuncher_getAppLuncherPath> begin_getAppLuncherPath();

        Ice.AsyncResult<AppController.Callback_ILuncher_getAppLuncherPath> begin_getAppLuncherPath(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getAppLuncherPath(Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_getAppLuncherPath(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_getAppLuncherPath(Ice.AsyncResult r__);

        string getCurrentUser();

        string getCurrentUser(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult<AppController.Callback_ILuncher_getCurrentUser> begin_getCurrentUser();

        Ice.AsyncResult<AppController.Callback_ILuncher_getCurrentUser> begin_getCurrentUser(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_getCurrentUser(Ice.AsyncCallback cb__, object cookie__);

        Ice.AsyncResult begin_getCurrentUser(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        string end_getCurrentUser(Ice.AsyncResult r__);
    }
}

namespace AppController
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public interface ILuncherOperations_
    {
        _System.Collections.Generic.List<CC.AppStartingResult> startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, Ice.Current current__);

        _System.Collections.Generic.List<CC.AppControlResult> closeApp(_System.Collections.Generic.List<int> processIdList, Ice.Current current__);

        _System.Collections.Generic.List<CC.AppStartingResult> restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, Ice.Current current__);

        bool captureScreen(long position, out int length, out byte[] data, Ice.Current current__);

        CC.Version getAppLuncherVersion(Ice.Current current__);

        string getAppLuncherPath(Ice.Current current__);

        string getCurrentUser(Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public interface ILuncherOperationsNC_
    {
        _System.Collections.Generic.List<CC.AppStartingResult> startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams);

        _System.Collections.Generic.List<CC.AppControlResult> closeApp(_System.Collections.Generic.List<int> processIdList);

        _System.Collections.Generic.List<CC.AppStartingResult> restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams);

        bool captureScreen(long position, out int length, out byte[] data);

        CC.Version getAppLuncherVersion();

        string getAppLuncherPath();

        string getCurrentUser();
    }
}

namespace AppController
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public sealed class ILuncherPrxHelper : Ice.ObjectPrxHelperBase, ILuncherPrx
    {
        #region Synchronous operations

        public bool captureScreen(long position, out int length, out byte[] data)
        {
            return this.captureScreen(position, out length, out data, null, false);
        }

        public bool captureScreen(long position, out int length, out byte[] data, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.captureScreen(position, out length, out data, ctx__, true);
        }

        private bool captureScreen(long position, out int length, out byte[] data, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__captureScreen_name);
            return end_captureScreen(out length, out data, begin_captureScreen(position, context__, explicitCtx__, true, null, null));
        }

        public _System.Collections.Generic.List<CC.AppControlResult> closeApp(_System.Collections.Generic.List<int> processIdList)
        {
            return this.closeApp(processIdList, null, false);
        }

        public _System.Collections.Generic.List<CC.AppControlResult> closeApp(_System.Collections.Generic.List<int> processIdList, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.closeApp(processIdList, ctx__, true);
        }

        private _System.Collections.Generic.List<CC.AppControlResult> closeApp(_System.Collections.Generic.List<int> processIdList, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__closeApp_name);
            return end_closeApp(begin_closeApp(processIdList, context__, explicitCtx__, true, null, null));
        }

        public string getAppLuncherPath()
        {
            return this.getAppLuncherPath(null, false);
        }

        public string getAppLuncherPath(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.getAppLuncherPath(ctx__, true);
        }

        private string getAppLuncherPath(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__getAppLuncherPath_name);
            return end_getAppLuncherPath(begin_getAppLuncherPath(context__, explicitCtx__, true, null, null));
        }

        public CC.Version getAppLuncherVersion()
        {
            return this.getAppLuncherVersion(null, false);
        }

        public CC.Version getAppLuncherVersion(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.getAppLuncherVersion(ctx__, true);
        }

        private CC.Version getAppLuncherVersion(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__getAppLuncherVersion_name);
            return end_getAppLuncherVersion(begin_getAppLuncherVersion(context__, explicitCtx__, true, null, null));
        }

        public string getCurrentUser()
        {
            return this.getCurrentUser(null, false);
        }

        public string getCurrentUser(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.getCurrentUser(ctx__, true);
        }

        private string getCurrentUser(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__getCurrentUser_name);
            return end_getCurrentUser(begin_getCurrentUser(context__, explicitCtx__, true, null, null));
        }

        public _System.Collections.Generic.List<CC.AppStartingResult> restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams)
        {
            return this.restartApp(appParams, null, false);
        }

        public _System.Collections.Generic.List<CC.AppStartingResult> restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.restartApp(appParams, ctx__, true);
        }

        private _System.Collections.Generic.List<CC.AppStartingResult> restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__restartApp_name);
            return end_restartApp(begin_restartApp(appParams, context__, explicitCtx__, true, null, null));
        }

        public _System.Collections.Generic.List<CC.AppStartingResult> startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams)
        {
            return this.startApp(appParams, null, false);
        }

        public _System.Collections.Generic.List<CC.AppStartingResult> startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return this.startApp(appParams, ctx__, true);
        }

        private _System.Collections.Generic.List<CC.AppStartingResult> startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
        {
            checkTwowayOnly__(__startApp_name);
            return end_startApp(begin_startApp(appParams, context__, explicitCtx__, true, null, null));
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<AppController.Callback_ILuncher_captureScreen> begin_captureScreen(long position)
        {
            return begin_captureScreen(position, null, false, false, null, null);
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_captureScreen> begin_captureScreen(long position, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_captureScreen(position, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_captureScreen(long position, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_captureScreen(position, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_captureScreen(long position, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_captureScreen(position, ctx__, true, false, cb__, cookie__);
        }

        private const string __captureScreen_name = "captureScreen";

        public bool end_captureScreen(out int length, out byte[] data, Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __captureScreen_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(CC.FileTransException)
                    {
                        throw;
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                bool ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                length = is__.readInt();
                data = CC.ByteArrayHelper.read(is__);
                ret__ = is__.readBool();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<AppController.Callback_ILuncher_captureScreen> begin_captureScreen(long position, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__captureScreen_name);
            IceInternal.TwowayOutgoingAsync<AppController.Callback_ILuncher_captureScreen> result__ =  getTwowayOutgoingAsync<AppController.Callback_ILuncher_captureScreen>(__captureScreen_name, captureScreen_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__captureScreen_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                os__.writeLong(position);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void captureScreen_completed__(Ice.AsyncResult r__, AppController.Callback_ILuncher_captureScreen cb__, Ice.ExceptionCallback excb__)
        {
            int length;
            byte[] data;
            bool ret__;
            try
            {
                ret__ = end_captureScreen(out length, out data, r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__, length, data);
            }
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_closeApp> begin_closeApp(_System.Collections.Generic.List<int> processIdList)
        {
            return begin_closeApp(processIdList, null, false, false, null, null);
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_closeApp> begin_closeApp(_System.Collections.Generic.List<int> processIdList, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_closeApp(processIdList, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_closeApp(_System.Collections.Generic.List<int> processIdList, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_closeApp(processIdList, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_closeApp(_System.Collections.Generic.List<int> processIdList, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_closeApp(processIdList, ctx__, true, false, cb__, cookie__);
        }

        private const string __closeApp_name = "closeApp";

        public _System.Collections.Generic.List<CC.AppControlResult> end_closeApp(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __closeApp_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                _System.Collections.Generic.List<CC.AppControlResult> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = CC.AppControlResultsHelper.read(is__);
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<AppController.Callback_ILuncher_closeApp> begin_closeApp(_System.Collections.Generic.List<int> processIdList, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__closeApp_name);
            IceInternal.TwowayOutgoingAsync<AppController.Callback_ILuncher_closeApp> result__ =  getTwowayOutgoingAsync<AppController.Callback_ILuncher_closeApp>(__closeApp_name, closeApp_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__closeApp_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                CC.ProcessIdListHelper.write(os__, processIdList);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void closeApp_completed__(Ice.AsyncResult r__, AppController.Callback_ILuncher_closeApp cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.List<CC.AppControlResult> ret__;
            try
            {
                ret__ = end_closeApp(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_getAppLuncherPath> begin_getAppLuncherPath()
        {
            return begin_getAppLuncherPath(null, false, false, null, null);
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_getAppLuncherPath> begin_getAppLuncherPath(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getAppLuncherPath(ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_getAppLuncherPath(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAppLuncherPath(null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getAppLuncherPath(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAppLuncherPath(ctx__, true, false, cb__, cookie__);
        }

        private const string __getAppLuncherPath_name = "getAppLuncherPath";

        public string end_getAppLuncherPath(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __getAppLuncherPath_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                string ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readString();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<AppController.Callback_ILuncher_getAppLuncherPath> begin_getAppLuncherPath(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getAppLuncherPath_name);
            IceInternal.TwowayOutgoingAsync<AppController.Callback_ILuncher_getAppLuncherPath> result__ =  getTwowayOutgoingAsync<AppController.Callback_ILuncher_getAppLuncherPath>(__getAppLuncherPath_name, getAppLuncherPath_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__getAppLuncherPath_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                result__.writeEmptyParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void getAppLuncherPath_completed__(Ice.AsyncResult r__, AppController.Callback_ILuncher_getAppLuncherPath cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_getAppLuncherPath(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_getAppLuncherVersion> begin_getAppLuncherVersion()
        {
            return begin_getAppLuncherVersion(null, false, false, null, null);
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_getAppLuncherVersion> begin_getAppLuncherVersion(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getAppLuncherVersion(ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_getAppLuncherVersion(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAppLuncherVersion(null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getAppLuncherVersion(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getAppLuncherVersion(ctx__, true, false, cb__, cookie__);
        }

        private const string __getAppLuncherVersion_name = "getAppLuncherVersion";

        public CC.Version end_getAppLuncherVersion(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __getAppLuncherVersion_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                CC.Version ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = null;
                ret__ = CC.Version.read__(is__, ret__);
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<AppController.Callback_ILuncher_getAppLuncherVersion> begin_getAppLuncherVersion(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getAppLuncherVersion_name);
            IceInternal.TwowayOutgoingAsync<AppController.Callback_ILuncher_getAppLuncherVersion> result__ =  getTwowayOutgoingAsync<AppController.Callback_ILuncher_getAppLuncherVersion>(__getAppLuncherVersion_name, getAppLuncherVersion_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__getAppLuncherVersion_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                result__.writeEmptyParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void getAppLuncherVersion_completed__(Ice.AsyncResult r__, AppController.Callback_ILuncher_getAppLuncherVersion cb__, Ice.ExceptionCallback excb__)
        {
            CC.Version ret__;
            try
            {
                ret__ = end_getAppLuncherVersion(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_getCurrentUser> begin_getCurrentUser()
        {
            return begin_getCurrentUser(null, false, false, null, null);
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_getCurrentUser> begin_getCurrentUser(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_getCurrentUser(ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_getCurrentUser(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getCurrentUser(null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_getCurrentUser(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_getCurrentUser(ctx__, true, false, cb__, cookie__);
        }

        private const string __getCurrentUser_name = "getCurrentUser";

        public string end_getCurrentUser(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __getCurrentUser_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                string ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = is__.readString();
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<AppController.Callback_ILuncher_getCurrentUser> begin_getCurrentUser(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__getCurrentUser_name);
            IceInternal.TwowayOutgoingAsync<AppController.Callback_ILuncher_getCurrentUser> result__ =  getTwowayOutgoingAsync<AppController.Callback_ILuncher_getCurrentUser>(__getCurrentUser_name, getCurrentUser_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__getCurrentUser_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                result__.writeEmptyParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void getCurrentUser_completed__(Ice.AsyncResult r__, AppController.Callback_ILuncher_getCurrentUser cb__, Ice.ExceptionCallback excb__)
        {
            string ret__;
            try
            {
                ret__ = end_getCurrentUser(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_restartApp> begin_restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams)
        {
            return begin_restartApp(appParams, null, false, false, null, null);
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_restartApp> begin_restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_restartApp(appParams, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_restartApp(appParams, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_restartApp(appParams, ctx__, true, false, cb__, cookie__);
        }

        private const string __restartApp_name = "restartApp";

        public _System.Collections.Generic.List<CC.AppStartingResult> end_restartApp(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __restartApp_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                _System.Collections.Generic.List<CC.AppStartingResult> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = CC.AppStartingResultsHelper.read(is__);
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<AppController.Callback_ILuncher_restartApp> begin_restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__restartApp_name);
            IceInternal.TwowayOutgoingAsync<AppController.Callback_ILuncher_restartApp> result__ =  getTwowayOutgoingAsync<AppController.Callback_ILuncher_restartApp>(__restartApp_name, restartApp_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__restartApp_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                CC.AppStartParametersHelper.write(os__, appParams);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void restartApp_completed__(Ice.AsyncResult r__, AppController.Callback_ILuncher_restartApp cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.List<CC.AppStartingResult> ret__;
            try
            {
                ret__ = end_restartApp(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_startApp> begin_startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams)
        {
            return begin_startApp(appParams, null, false, false, null, null);
        }

        public Ice.AsyncResult<AppController.Callback_ILuncher_startApp> begin_startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_startApp(appParams, ctx__, true, false, null, null);
        }

        public Ice.AsyncResult begin_startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_startApp(appParams, null, false, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_startApp(appParams, ctx__, true, false, cb__, cookie__);
        }

        private const string __startApp_name = "startApp";

        public _System.Collections.Generic.List<CC.AppStartingResult> end_startApp(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __startApp_name);
            try
            {
                if(!outAsync__.wait())
                {
                    try
                    {
                        outAsync__.throwUserException();
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                _System.Collections.Generic.List<CC.AppStartingResult> ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams();
                ret__ = CC.AppStartingResultsHelper.read(is__);
                outAsync__.endReadParams();
                return ret__;
            }
            finally
            {
                outAsync__.cacheMessageBuffers();
            }
        }

        private Ice.AsyncResult<AppController.Callback_ILuncher_startApp> begin_startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__startApp_name);
            IceInternal.TwowayOutgoingAsync<AppController.Callback_ILuncher_startApp> result__ =  getTwowayOutgoingAsync<AppController.Callback_ILuncher_startApp>(__startApp_name, startApp_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare(__startApp_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                CC.AppStartParametersHelper.write(os__, appParams);
                result__.endWriteParams();
                result__.invoke();
            }
            catch(Ice.Exception ex__)
            {
                result__.abort(ex__);
            }
            return result__;
        }

        private void startApp_completed__(Ice.AsyncResult r__, AppController.Callback_ILuncher_startApp cb__, Ice.ExceptionCallback excb__)
        {
            _System.Collections.Generic.List<CC.AppStartingResult> ret__;
            try
            {
                ret__ = end_startApp(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ILuncherPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ILuncherPrx r = b as ILuncherPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ILuncherPrxHelper h = new ILuncherPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ILuncherPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ILuncherPrx r = b as ILuncherPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ILuncherPrxHelper h = new ILuncherPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ILuncherPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ILuncherPrxHelper h = new ILuncherPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ILuncherPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ILuncherPrxHelper h = new ILuncherPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ILuncherPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ILuncherPrx r = b as ILuncherPrx;
            if(r == null)
            {
                ILuncherPrxHelper h = new ILuncherPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static ILuncherPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ILuncherPrxHelper h = new ILuncherPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::AppController::ILuncher",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        public static void write__(IceInternal.BasicStream os__, ILuncherPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static ILuncherPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                ILuncherPrxHelper result = new ILuncherPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace AppController
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.5")]
    public abstract class ILuncherDisp_ : Ice.ObjectImpl, ILuncher
    {
        #region Slice operations

        public _System.Collections.Generic.List<CC.AppStartingResult> startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams)
        {
            return startApp(appParams, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract _System.Collections.Generic.List<CC.AppStartingResult> startApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, Ice.Current current__);

        public _System.Collections.Generic.List<CC.AppControlResult> closeApp(_System.Collections.Generic.List<int> processIdList)
        {
            return closeApp(processIdList, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract _System.Collections.Generic.List<CC.AppControlResult> closeApp(_System.Collections.Generic.List<int> processIdList, Ice.Current current__);

        public _System.Collections.Generic.List<CC.AppStartingResult> restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams)
        {
            return restartApp(appParams, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract _System.Collections.Generic.List<CC.AppStartingResult> restartApp(_System.Collections.Generic.List<CC.AppStartParameter> appParams, Ice.Current current__);

        public bool captureScreen(long position, out int length, out byte[] data)
        {
            return captureScreen(position, out length, out data, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool captureScreen(long position, out int length, out byte[] data, Ice.Current current__);

        public CC.Version getAppLuncherVersion()
        {
            return getAppLuncherVersion(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract CC.Version getAppLuncherVersion(Ice.Current current__);

        public string getAppLuncherPath()
        {
            return getAppLuncherPath(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string getAppLuncherPath(Ice.Current current__);

        public string getCurrentUser()
        {
            return getCurrentUser(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract string getCurrentUser(Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::AppController::ILuncher",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus startApp___(ILuncher obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            _System.Collections.Generic.List<CC.AppStartParameter> appParams;
            appParams = CC.AppStartParametersHelper.read(is__);
            inS__.endReadParams();
            _System.Collections.Generic.List<CC.AppStartingResult> ret__ = obj__.startApp(appParams, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            CC.AppStartingResultsHelper.write(os__, ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus closeApp___(ILuncher obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            _System.Collections.Generic.List<int> processIdList;
            processIdList = CC.ProcessIdListHelper.read(is__);
            inS__.endReadParams();
            _System.Collections.Generic.List<CC.AppControlResult> ret__ = obj__.closeApp(processIdList, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            CC.AppControlResultsHelper.write(os__, ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus restartApp___(ILuncher obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            _System.Collections.Generic.List<CC.AppStartParameter> appParams;
            appParams = CC.AppStartParametersHelper.read(is__);
            inS__.endReadParams();
            _System.Collections.Generic.List<CC.AppStartingResult> ret__ = obj__.restartApp(appParams, current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            CC.AppStartingResultsHelper.write(os__, ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus captureScreen___(ILuncher obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            long position;
            position = is__.readLong();
            inS__.endReadParams();
            int length;
            byte[] data;
            try
            {
                bool ret__ = obj__.captureScreen(position, out length, out data, current__);
                IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeInt(length);
                CC.ByteArrayHelper.write(os__, data);
                os__.writeBool(ret__);
                inS__.endWriteParams__(true);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(CC.FileTransException ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getAppLuncherVersion___(ILuncher obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            CC.Version ret__ = obj__.getAppLuncherVersion(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            CC.Version.write__(os__, ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getAppLuncherPath___(ILuncher obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            string ret__ = obj__.getAppLuncherPath(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus getCurrentUser___(ILuncher obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
            inS__.readEmptyParams();
            string ret__ = obj__.getCurrentUser(current__);
            IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
            os__.writeString(ret__);
            inS__.endWriteParams__(true);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "captureScreen",
            "closeApp",
            "getAppLuncherPath",
            "getAppLuncherVersion",
            "getCurrentUser",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "restartApp",
            "startApp"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return captureScreen___(this, inS__, current__);
                }
                case 1:
                {
                    return closeApp___(this, inS__, current__);
                }
                case 2:
                {
                    return getAppLuncherPath___(this, inS__, current__);
                }
                case 3:
                {
                    return getAppLuncherVersion___(this, inS__, current__);
                }
                case 4:
                {
                    return getCurrentUser___(this, inS__, current__);
                }
                case 5:
                {
                    return Ice.ObjectImpl.ice_id___(this, inS__, current__);
                }
                case 6:
                {
                    return Ice.ObjectImpl.ice_ids___(this, inS__, current__);
                }
                case 7:
                {
                    return Ice.ObjectImpl.ice_isA___(this, inS__, current__);
                }
                case 8:
                {
                    return Ice.ObjectImpl.ice_ping___(this, inS__, current__);
                }
                case 9:
                {
                    return restartApp___(this, inS__, current__);
                }
                case 10:
                {
                    return startApp___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }
}
