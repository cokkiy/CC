.TH "QwtScaleDiv" 3 "Sun Jul 18 2021" "Version 6.2.0" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtScaleDiv \- A class representing a scale division\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_scale_div\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBTickType\fP { \fBNoTick\fP = -1, \fBMinorTick\fP, \fBMediumTick\fP, \fBMajorTick\fP, \fBNTickTypes\fP }"
.br
.RI "Scale tick types\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtScaleDiv\fP (double \fBlowerBound\fP=0\&.0, double \fBupperBound\fP=0\&.0)"
.br
.ti -1c
.RI "\fBQwtScaleDiv\fP (const \fBQwtInterval\fP &, \fBQList\fP< double >[\fBNTickTypes\fP])"
.br
.ti -1c
.RI "\fBQwtScaleDiv\fP (double \fBlowerBound\fP, double \fBupperBound\fP, \fBQList\fP< double >[\fBNTickTypes\fP])"
.br
.ti -1c
.RI "\fBQwtScaleDiv\fP (double \fBlowerBound\fP, double \fBupperBound\fP, const \fBQList\fP< double > &minorTicks, const \fBQList\fP< double > &mediumTicks, const \fBQList\fP< double > &majorTicks)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBQwtScaleDiv\fP &) const"
.br
.RI "Equality operator\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBQwtScaleDiv\fP &) const"
.br
.RI "Inequality\&. "
.ti -1c
.RI "void \fBsetInterval\fP (double \fBlowerBound\fP, double \fBupperBound\fP)"
.br
.ti -1c
.RI "void \fBsetInterval\fP (const \fBQwtInterval\fP &)"
.br
.ti -1c
.RI "\fBQwtInterval\fP \fBinterval\fP () const"
.br
.ti -1c
.RI "void \fBsetLowerBound\fP (double)"
.br
.ti -1c
.RI "double \fBlowerBound\fP () const"
.br
.ti -1c
.RI "void \fBsetUpperBound\fP (double)"
.br
.ti -1c
.RI "double \fBupperBound\fP () const"
.br
.ti -1c
.RI "double \fBrange\fP () const"
.br
.ti -1c
.RI "bool \fBcontains\fP (double value) const"
.br
.ti -1c
.RI "void \fBsetTicks\fP (int tickType, const \fBQList\fP< double > &)"
.br
.ti -1c
.RI "\fBQList\fP< double > \fBticks\fP (int tickType) const"
.br
.ti -1c
.RI "bool \fBisEmpty\fP () const"
.br
.RI "Check if the scale division is empty( \fBlowerBound()\fP == \fBupperBound()\fP ) "
.ti -1c
.RI "bool \fBisIncreasing\fP () const"
.br
.RI "Check if the scale division is increasing( \fBlowerBound()\fP <= \fBupperBound()\fP ) "
.ti -1c
.RI "void \fBinvert\fP ()"
.br
.ti -1c
.RI "\fBQwtScaleDiv\fP \fBinverted\fP () const"
.br
.ti -1c
.RI "\fBQwtScaleDiv\fP \fBbounded\fP (double \fBlowerBound\fP, double \fBupperBound\fP) const"
.br
.in -1c
.SH "Detailed Description"
.PP 
A class representing a scale division\&. 

A Qwt scale is defined by its boundaries and 3 list for the positions of the major, medium and minor ticks\&.
.PP
The \fBupperBound()\fP might be smaller than the \fBlowerBound()\fP to indicate inverted scales\&.
.PP
Scale divisions can be calculated from a \fBQwtScaleEngine\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBQwtScaleEngine::divideScale()\fP, \fBQwtPlot::setAxisScaleDiv()\fP, QwtAbstractSlider::setScaleDiv() 
.RE
.PP

.PP
Definition at line 33 of file qwt_scale_div\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtScaleDiv::TickType\fP"

.PP
Scale tick types\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINoTick \fP\fP
No ticks\&. 
.TP
\fB\fIMinorTick \fP\fP
Minor ticks\&. 
.TP
\fB\fIMediumTick \fP\fP
Medium ticks\&. 
.TP
\fB\fIMajorTick \fP\fP
Major ticks\&. 
.TP
\fB\fINTickTypes \fP\fP
Number of valid tick types\&. 
.PP
Definition at line 37 of file qwt_scale_div\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtScaleDiv::QwtScaleDiv (double lowerBound = \fC0\&.0\fP, double upperBound = \fC0\&.0\fP)\fC [explicit]\fP"
Construct a division without ticks
.PP
\fBParameters\fP
.RS 4
\fIlowerBound\fP First boundary 
.br
\fIupperBound\fP Second boundary
.RE
.PP
\fBNote\fP
.RS 4
lowerBound might be greater than upperBound for inverted scales 
.RE
.PP

.PP
Definition at line 21 of file qwt_scale_div\&.cpp\&.
.SS "QwtScaleDiv::QwtScaleDiv (const \fBQwtInterval\fP & interval, \fBQList\fP< double > ticks[NTickTypes])\fC [explicit]\fP"
Construct a scale division
.PP
\fBParameters\fP
.RS 4
\fIinterval\fP Interval 
.br
\fIticks\fP List of major, medium and minor ticks 
.RE
.PP

.PP
Definition at line 33 of file qwt_scale_div\&.cpp\&.
.SS "QwtScaleDiv::QwtScaleDiv (double lowerBound, double upperBound, \fBQList\fP< double > ticks[NTickTypes])\fC [explicit]\fP"
Construct a scale division
.PP
\fBParameters\fP
.RS 4
\fIlowerBound\fP First boundary 
.br
\fIupperBound\fP Second boundary 
.br
\fIticks\fP List of major, medium and minor ticks
.RE
.PP
\fBNote\fP
.RS 4
lowerBound might be greater than upperBound for inverted scales 
.RE
.PP

.PP
Definition at line 51 of file qwt_scale_div\&.cpp\&.
.SS "QwtScaleDiv::QwtScaleDiv (double lowerBound, double upperBound, const \fBQList\fP< double > & minorTicks, const \fBQList\fP< double > & mediumTicks, const \fBQList\fP< double > & majorTicks)\fC [explicit]\fP"
Construct a scale division
.PP
\fBParameters\fP
.RS 4
\fIlowerBound\fP First boundary 
.br
\fIupperBound\fP Second boundary 
.br
\fIminorTicks\fP List of minor ticks 
.br
\fImediumTicks\fP List medium ticks 
.br
\fImajorTicks\fP List of major ticks
.RE
.PP
\fBNote\fP
.RS 4
lowerBound might be greater than upperBound for inverted scales 
.RE
.PP

.PP
Definition at line 71 of file qwt_scale_div\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBQwtScaleDiv\fP QwtScaleDiv::bounded (double lowerBound, double upperBound) const"
Return a scale division with an interval [lowerBound, upperBound] where all ticks outside this interval are removed
.PP
\fBParameters\fP
.RS 4
\fIlowerBound\fP Lower bound 
.br
\fIupperBound\fP Upper bound
.RE
.PP
\fBReturns\fP
.RS 4
Scale division with all ticks inside of the given interval
.RE
.PP
\fBNote\fP
.RS 4
lowerBound might be greater than upperBound for inverted scales 
.RE
.PP

.PP
Definition at line 263 of file qwt_scale_div\&.cpp\&.
.SS "bool QwtScaleDiv::contains (double value) const"
Return if a value is between \fBlowerBound()\fP and \fBupperBound()\fP
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value 
.RE
.PP
\fBReturns\fP
.RS 4
true/false 
.RE
.PP

.PP
Definition at line 212 of file qwt_scale_div\&.cpp\&.
.SS "\fBQwtInterval\fP QwtScaleDiv::interval () const"

.PP
\fBReturns\fP
.RS 4
lowerBound -> upperBound 
.RE
.PP

.PP
Definition at line 111 of file qwt_scale_div\&.cpp\&.
.SS "void QwtScaleDiv::invert ()"
Invert the scale division 
.PP
\fBSee also\fP
.RS 4
\fBinverted()\fP 
.RE
.PP

.PP
Definition at line 224 of file qwt_scale_div\&.cpp\&.
.SS "\fBQwtScaleDiv\fP QwtScaleDiv::inverted () const"

.PP
\fBReturns\fP
.RS 4
A scale division with inverted boundaries and ticks 
.RE
.PP
\fBSee also\fP
.RS 4
\fBinvert()\fP 
.RE
.PP

.PP
Definition at line 244 of file qwt_scale_div\&.cpp\&.
.SS "double QwtScaleDiv::lowerBound () const"

.PP
\fBReturns\fP
.RS 4
First boundary 
.RE
.PP
\fBSee also\fP
.RS 4
\fBupperBound()\fP 
.RE
.PP

.PP
Definition at line 131 of file qwt_scale_div\&.cpp\&.
.SS "bool QwtScaleDiv::operator!= (const \fBQwtScaleDiv\fP & other) const"

.PP
Inequality\&. 
.PP
\fBReturns\fP
.RS 4
true if this instance is not equal to other 
.RE
.PP

.PP
Definition at line 189 of file qwt_scale_div\&.cpp\&.
.SS "bool QwtScaleDiv::operator== (const \fBQwtScaleDiv\fP & other) const"

.PP
Equality operator\&. 
.PP
\fBReturns\fP
.RS 4
true if this instance is equal to other 
.RE
.PP

.PP
Definition at line 168 of file qwt_scale_div\&.cpp\&.
.SS "double QwtScaleDiv::range () const"

.PP
\fBReturns\fP
.RS 4
\fBupperBound()\fP - \fBlowerBound()\fP 
.RE
.PP

.PP
Definition at line 159 of file qwt_scale_div\&.cpp\&.
.SS "void QwtScaleDiv::setInterval (const \fBQwtInterval\fP & interval)"
Change the interval
.PP
\fBParameters\fP
.RS 4
\fIinterval\fP Interval 
.RE
.PP

.PP
Definition at line 102 of file qwt_scale_div\&.cpp\&.
.SS "void QwtScaleDiv::setInterval (double lowerBound, double upperBound)"
Change the interval
.PP
\fBParameters\fP
.RS 4
\fIlowerBound\fP First boundary 
.br
\fIupperBound\fP Second boundary
.RE
.PP
\fBNote\fP
.RS 4
lowerBound might be greater than upperBound for inverted scales 
.RE
.PP

.PP
Definition at line 91 of file qwt_scale_div\&.cpp\&.
.SS "void QwtScaleDiv::setLowerBound (double lowerBound)"
Set the first boundary
.PP
\fBParameters\fP
.RS 4
\fIlowerBound\fP First boundary 
.RE
.PP
\fBSee also\fP
.RS 4
\fBlowerBound()\fP, \fBsetUpperBound()\fP 
.RE
.PP

.PP
Definition at line 122 of file qwt_scale_div\&.cpp\&.
.SS "void QwtScaleDiv::setTicks (int tickType, const \fBQList\fP< double > & ticks)"
Assign ticks
.PP
\fBParameters\fP
.RS 4
\fItickType\fP MinorTick, MediumTick or MajorTick 
.br
\fIticks\fP Values of the tick positions 
.RE
.PP

.PP
Definition at line 297 of file qwt_scale_div\&.cpp\&.
.SS "void QwtScaleDiv::setUpperBound (double upperBound)"
Set the second boundary
.PP
\fBParameters\fP
.RS 4
\fIupperBound\fP Second boundary 
.RE
.PP
\fBSee also\fP
.RS 4
\fBupperBound()\fP, \fBsetLowerBound()\fP 
.RE
.PP

.PP
Definition at line 142 of file qwt_scale_div\&.cpp\&.
.SS "\fBQList\fP< double > QwtScaleDiv::ticks (int tickType) const"
Return a list of ticks
.PP
\fBParameters\fP
.RS 4
\fItickType\fP MinorTick, MediumTick or MajorTick 
.RE
.PP
\fBReturns\fP
.RS 4
Tick list 
.RE
.PP

.PP
Definition at line 309 of file qwt_scale_div\&.cpp\&.
.SS "double QwtScaleDiv::upperBound () const"

.PP
\fBReturns\fP
.RS 4
upper bound 
.RE
.PP
\fBSee also\fP
.RS 4
\fBlowerBound()\fP 
.RE
.PP

.PP
Definition at line 151 of file qwt_scale_div\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code\&.
