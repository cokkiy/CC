.TH "QwtAbstractSlider" 3 "Sun Jul 18 2021" "Version 6.2.0" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtAbstractSlider \- An abstract base class for slider widgets with a scale\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_abstract_slider\&.h>\fP
.PP
Inherits \fBQwtAbstractScale\fP\&.
.PP
Inherited by \fBQwtDial\fP, \fBQwtKnob\fP, and \fBQwtSlider\fP\&.
.SS "Public Slots"

.in +1c
.ti -1c
.RI "void \fBsetValue\fP (double \fBvalue\fP)"
.br
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBvalueChanged\fP (double \fBvalue\fP)"
.br
.RI "Notify a change of value\&. "
.ti -1c
.RI "void \fBsliderPressed\fP ()"
.br
.ti -1c
.RI "void \fBsliderReleased\fP ()"
.br
.ti -1c
.RI "void \fBsliderMoved\fP (double \fBvalue\fP)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtAbstractSlider\fP (QWidget *parent=NULL)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "virtual \fB~QwtAbstractSlider\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "void \fBsetValid\fP (bool)"
.br
.ti -1c
.RI "bool \fBisValid\fP () const"
.br
.ti -1c
.RI "double \fBvalue\fP () const"
.br
.RI "Returns the current value\&. "
.ti -1c
.RI "void \fBsetWrapping\fP (bool)"
.br
.ti -1c
.RI "bool \fBwrapping\fP () const"
.br
.ti -1c
.RI "void \fBsetTotalSteps\fP (uint)"
.br
.RI "Set the number of steps\&. "
.ti -1c
.RI "uint \fBtotalSteps\fP () const"
.br
.ti -1c
.RI "void \fBsetSingleSteps\fP (uint)"
.br
.RI "Set the number of steps for a single increment\&. "
.ti -1c
.RI "uint \fBsingleSteps\fP () const"
.br
.ti -1c
.RI "void \fBsetPageSteps\fP (uint)"
.br
.RI "Set the number of steps for a page increment\&. "
.ti -1c
.RI "uint \fBpageSteps\fP () const"
.br
.ti -1c
.RI "void \fBsetStepAlignment\fP (bool)"
.br
.RI "Enable step alignment\&. "
.ti -1c
.RI "bool \fBstepAlignment\fP () const"
.br
.ti -1c
.RI "void \fBsetTracking\fP (bool)"
.br
.RI "Enables or disables tracking\&. "
.ti -1c
.RI "bool \fBisTracking\fP () const"
.br
.ti -1c
.RI "void \fBsetReadOnly\fP (bool)"
.br
.ti -1c
.RI "bool \fBisReadOnly\fP () const"
.br
.ti -1c
.RI "void \fBsetInvertedControls\fP (bool)"
.br
.ti -1c
.RI "bool \fBinvertedControls\fP () const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBmousePressEvent\fP (QMouseEvent *) override"
.br
.ti -1c
.RI "virtual void \fBmouseReleaseEvent\fP (QMouseEvent *) override"
.br
.ti -1c
.RI "virtual void \fBmouseMoveEvent\fP (QMouseEvent *) override"
.br
.ti -1c
.RI "virtual void \fBkeyPressEvent\fP (QKeyEvent *) override"
.br
.ti -1c
.RI "virtual void \fBwheelEvent\fP (QWheelEvent *) override"
.br
.ti -1c
.RI "virtual bool \fBisScrollPosition\fP (const QPoint &pos) const =0"
.br
.RI "Determine what to do when the user presses a mouse button\&. "
.ti -1c
.RI "virtual double \fBscrolledTo\fP (const QPoint &pos) const =0"
.br
.RI "Determine the value for a new position of the movable part of the slider\&. "
.ti -1c
.RI "void \fBincrementValue\fP (int stepCount)"
.br
.ti -1c
.RI "virtual void \fBscaleChange\fP () override"
.br
.ti -1c
.RI "virtual void \fBsliderChange\fP ()"
.br
.RI "Calling update() "
.ti -1c
.RI "double \fBincrementedValue\fP (double \fBvalue\fP, int stepCount) const"
.br
.in -1c
.SH "Detailed Description"
.PP 
An abstract base class for slider widgets with a scale\&. 

A slider widget displays a value according to a scale\&. The class is designed as a common super class for widgets like \fBQwtKnob\fP, \fBQwtDial\fP and \fBQwtSlider\fP\&.
.PP
When the slider is nor readOnly() its value can be modified by keyboard, mouse and wheel inputs\&.
.PP
The range of the slider is divided into a number of steps from which the value increments according to user inputs depend\&. Only for linear scales the number of steps correspond with a fixed step size\&. 
.PP
Definition at line 32 of file qwt_abstract_slider\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtAbstractSlider::QwtAbstractSlider (QWidget * parent = \fCNULL\fP)\fC [explicit]\fP"

.PP
Constructor\&. The scale is initialized to [0\&.0, 100\&.0], the number of steps is set to 100 with 1 and 10 and single an page step sizes\&. Step alignment is enabled\&.
.PP
The initial value is invalid\&.
.PP
\fBParameters\fP
.RS 4
\fIparent\fP Parent widget 
.RE
.PP

.PP
Definition at line 91 of file qwt_abstract_slider\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "double QwtAbstractSlider::incrementedValue (double value, int stepCount) const\fC [protected]\fP"
Increment a value
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value 
.br
\fIstepCount\fP Number of steps
.RE
.PP
\fBReturns\fP
.RS 4
Incremented value 
.RE
.PP

.PP
Definition at line 670 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::incrementValue (int stepCount)\fC [protected]\fP"
Increment the slider
.PP
The step size depends on the number of \fBtotalSteps()\fP
.PP
\fBParameters\fP
.RS 4
\fIstepCount\fP Number of steps 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetTotalSteps()\fP, \fBincrementedValue()\fP 
.RE
.PP

.PP
Definition at line 650 of file qwt_abstract_slider\&.cpp\&.
.SS "bool QwtAbstractSlider::invertedControls () const"

.PP
\fBReturns\fP
.RS 4
True, when the controls are inverted 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetInvertedControls()\fP 
.RE
.PP

.PP
Definition at line 637 of file qwt_abstract_slider\&.cpp\&.
.SS "bool QwtAbstractSlider::isReadOnly () const"
In read only mode the slider can't be controlled by mouse or keyboard\&.
.PP
\fBReturns\fP
.RS 4
true if read only 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetReadOnly()\fP 
.RE
.PP

.PP
Definition at line 159 of file qwt_abstract_slider\&.cpp\&.
.SS "virtual bool QwtAbstractSlider::isScrollPosition (const QPoint & pos) const\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Determine what to do when the user presses a mouse button\&. 
.PP
\fBParameters\fP
.RS 4
\fIpos\fP Mouse position
.RE
.PP
\fBReturn values\fP
.RS 4
\fITrue,when\fP pos is a valid scroll position 
.RE
.PP
\fBSee also\fP
.RS 4
\fBscrolledTo()\fP 
.RE
.PP

.PP
Implemented in \fBQwtSlider\fP, \fBQwtKnob\fP, and \fBQwtDial\fP\&.
.SS "bool QwtAbstractSlider::isTracking () const"

.PP
\fBReturns\fP
.RS 4
True, when tracking has been enabled 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetTracking()\fP 
.RE
.PP

.PP
Definition at line 186 of file qwt_abstract_slider\&.cpp\&.
.SS "bool QwtAbstractSlider::isValid () const"

.PP
\fBReturns\fP
.RS 4
True, when the value is invalid 
.RE
.PP

.PP
Definition at line 125 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::keyPressEvent (QKeyEvent * event)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Handles key events
.PP
\fBQwtAbstractSlider\fP handles the following keys:
.PP
.IP "\(bu" 2
Qt::Key_Left
.br
 Add/Subtract \fBsingleSteps()\fP in direction to \fBlowerBound()\fP;
.IP "\(bu" 2
Qt::Key_Right
.br
 Add/Subtract \fBsingleSteps()\fP in direction to \fBupperBound()\fP;
.IP "\(bu" 2
Qt::Key_Down
.br
 Subtract \fBsingleSteps()\fP, when \fBinvertedControls()\fP is false
.IP "\(bu" 2
Qt::Key_Up
.br
 Add \fBsingleSteps()\fP, when \fBinvertedControls()\fP is false
.IP "\(bu" 2
Qt::Key_PageDown
.br
 Subtract \fBpageSteps()\fP, when \fBinvertedControls()\fP is false
.IP "\(bu" 2
Qt::Key_PageUp
.br
 Add \fBpageSteps()\fP, when \fBinvertedControls()\fP is false
.IP "\(bu" 2
Qt::Key_Home
.br
 Set the value to the \fBminimum()\fP
.IP "\(bu" 2
Qt::Key_End
.br
 Set the value to the \fBmaximum()\fP
.PP
.PP
\fBParameters\fP
.RS 4
\fIevent\fP Key event 
.RE
.PP
\fBSee also\fP
.RS 4
\fBisReadOnly()\fP 
.RE
.PP

.PP
Reimplemented in \fBQwtCompass\fP\&.
.PP
Definition at line 370 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::mouseMoveEvent (QMouseEvent * event)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Mouse Move Event handler 
.PP
\fBParameters\fP
.RS 4
\fIevent\fP Mouse event 
.RE
.PP

.PP
Definition at line 220 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::mousePressEvent (QMouseEvent * event)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Mouse press event handler 
.PP
\fBParameters\fP
.RS 4
\fIevent\fP Mouse event 
.RE
.PP

.PP
Reimplemented in \fBQwtSlider\fP\&.
.PP
Definition at line 195 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::mouseReleaseEvent (QMouseEvent * event)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Mouse Release Event handler 
.PP
\fBParameters\fP
.RS 4
\fIevent\fP Mouse event 
.RE
.PP

.PP
Reimplemented in \fBQwtSlider\fP\&.
.PP
Definition at line 265 of file qwt_abstract_slider\&.cpp\&.
.SS "uint QwtAbstractSlider::pageSteps () const"

.PP
\fBReturns\fP
.RS 4
Number of steps 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPageSteps()\fP, \fBtotalSteps()\fP, \fBsingleSteps()\fP 
.RE
.PP

.PP
Definition at line 533 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::scaleChange ()\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Update the slider according to modifications of the scale 
.PP
Reimplemented from \fBQwtAbstractScale\fP\&.
.PP
Reimplemented in \fBQwtSlider\fP, and \fBQwtDial\fP\&.
.PP
Definition at line 811 of file qwt_abstract_slider\&.cpp\&.
.SS "virtual double QwtAbstractSlider::scrolledTo (const QPoint & pos) const\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Determine the value for a new position of the movable part of the slider\&. 
.PP
\fBParameters\fP
.RS 4
\fIpos\fP Mouse position
.RE
.PP
\fBReturns\fP
.RS 4
Value for the mouse position 
.RE
.PP
\fBSee also\fP
.RS 4
\fBisScrollPosition()\fP 
.RE
.PP

.PP
Implemented in \fBQwtSlider\fP, \fBQwtKnob\fP, and \fBQwtDial\fP\&.
.SS "void QwtAbstractSlider::setInvertedControls (bool on)"
Invert wheel and key events
.PP
Usually scrolling the mouse wheel 'up' and using keys like page up will increase the slider's value towards its maximum\&. When \fBinvertedControls()\fP is enabled the value is scrolled towards its minimum\&.
.PP
Inverting the controls might be f\&.e\&. useful for a vertical slider with an inverted scale ( decreasing from top to bottom )\&.
.PP
\fBParameters\fP
.RS 4
\fIon\fP Invert controls, when true
.RE
.PP
\fBSee also\fP
.RS 4
\fBinvertedControls()\fP, keyEvent(), \fBwheelEvent()\fP 
.RE
.PP

.PP
Definition at line 628 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::setPageSteps (uint stepCount)"

.PP
Set the number of steps for a page increment\&. The range of the slider is divided into a number of steps from which the value increments according to user inputs depend\&.
.PP
\fBParameters\fP
.RS 4
\fIstepCount\fP Number of steps
.RE
.PP
\fBSee also\fP
.RS 4
\fBpageSteps()\fP, \fBsetTotalSteps()\fP, \fBsetSingleSteps()\fP 
.RE
.PP

.PP
Definition at line 524 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::setReadOnly (bool on)"
En/Disable read only mode
.PP
In read only mode the slider can't be controlled by mouse or keyboard\&.
.PP
\fBParameters\fP
.RS 4
\fIon\fP Enables in case of true 
.RE
.PP
\fBSee also\fP
.RS 4
\fBisReadOnly()\fP
.RE
.PP
\fBWarning\fP
.RS 4
The focus policy is set to Qt::StrongFocus or Qt::NoFocus 
.RE
.PP

.PP
Definition at line 141 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::setSingleSteps (uint stepCount)"

.PP
Set the number of steps for a single increment\&. The range of the slider is divided into a number of steps from which the value increments according to user inputs depend\&.
.PP
\fBParameters\fP
.RS 4
\fIstepCount\fP Number of steps
.RE
.PP
\fBSee also\fP
.RS 4
\fBsingleSteps()\fP, \fBsetTotalSteps()\fP, \fBsetPageSteps()\fP 
.RE
.PP

.PP
Definition at line 499 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::setStepAlignment (bool on)"

.PP
Enable step alignment\&. When step alignment is enabled values resulting from slider movements are aligned to the step size\&.
.PP
\fBParameters\fP
.RS 4
\fIon\fP Enable step alignment when true 
.RE
.PP
\fBSee also\fP
.RS 4
\fBstepAlignment()\fP 
.RE
.PP

.PP
Definition at line 547 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::setTotalSteps (uint stepCount)"

.PP
Set the number of steps\&. The range of the slider is divided into a number of steps from which the value increments according to user inputs depend\&.
.PP
The default setting is 100\&.
.PP
\fBParameters\fP
.RS 4
\fIstepCount\fP Number of steps
.RE
.PP
\fBSee also\fP
.RS 4
\fBtotalSteps()\fP, \fBsetSingleSteps()\fP, \fBsetPageSteps()\fP 
.RE
.PP

.PP
Definition at line 474 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::setTracking (bool on)"

.PP
Enables or disables tracking\&. If tracking is enabled, the slider emits the \fBvalueChanged()\fP signal while the movable part of the slider is being dragged\&. If tracking is disabled, the slider emits the \fBvalueChanged()\fP signal only when the user releases the slider\&.
.PP
Tracking is enabled by default\&. 
.PP
\fBParameters\fP
.RS 4
\fIon\fP \fCtrue\fP (enable) or \fCfalse\fP (disable) tracking\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBisTracking()\fP, \fBsliderMoved()\fP 
.RE
.PP

.PP
Definition at line 177 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::setValid (bool on)"
Set the value to be valid/invalid
.PP
\fBParameters\fP
.RS 4
\fIon\fP When true, the value is invalidated
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetValue()\fP 
.RE
.PP

.PP
Definition at line 113 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::setValue (double value)\fC [slot]\fP"
Set the slider to the specified value
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP New value 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetValid()\fP, \fBsliderChange()\fP, \fBvalueChanged()\fP 
.RE
.PP

.PP
Definition at line 570 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::setWrapping (bool on)"
If wrapping is true stepping up from \fBupperBound()\fP value will take you to the \fBminimum()\fP value and vice versa\&.
.PP
\fBParameters\fP
.RS 4
\fIon\fP En/Disable wrapping 
.RE
.PP
\fBSee also\fP
.RS 4
\fBwrapping()\fP 
.RE
.PP

.PP
Definition at line 599 of file qwt_abstract_slider\&.cpp\&.
.SS "uint QwtAbstractSlider::singleSteps () const"

.PP
\fBReturns\fP
.RS 4
Number of steps 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetSingleSteps()\fP, \fBtotalSteps()\fP, \fBpageSteps()\fP 
.RE
.PP

.PP
Definition at line 508 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::sliderMoved (double value)\fC [signal]\fP"
This signal is emitted when the user moves the slider with the mouse\&.
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP New value
.RE
.PP
\fBSee also\fP
.RS 4
\fBvalueChanged()\fP 
.RE
.PP

.SS "void QwtAbstractSlider::sliderPressed ()\fC [signal]\fP"
This signal is emitted when the user presses the movable part of the slider\&. 
.SS "void QwtAbstractSlider::sliderReleased ()\fC [signal]\fP"
This signal is emitted when the user releases the movable part of the slider\&. 
.SS "bool QwtAbstractSlider::stepAlignment () const"

.PP
\fBReturns\fP
.RS 4
True, when step alignment is enabled 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetStepAlignment()\fP 
.RE
.PP

.PP
Definition at line 559 of file qwt_abstract_slider\&.cpp\&.
.SS "uint QwtAbstractSlider::totalSteps () const"

.PP
\fBReturns\fP
.RS 4
Number of steps 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetTotalSteps()\fP, \fBsingleSteps()\fP, \fBpageSteps()\fP 
.RE
.PP

.PP
Definition at line 483 of file qwt_abstract_slider\&.cpp\&.
.SS "void QwtAbstractSlider::valueChanged (double value)\fC [signal]\fP"

.PP
Notify a change of value\&. When tracking is enabled (default setting), this signal will be emitted every time the value changes\&.
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP New value
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetTracking()\fP, \fBsliderMoved()\fP 
.RE
.PP

.SS "void QwtAbstractSlider::wheelEvent (QWheelEvent * event)\fC [override]\fP, \fC [protected]\fP, \fC [virtual]\fP"
Wheel Event handler
.PP
In/decreases the value by s number of steps\&. The direction depends on the \fBinvertedControls()\fP property\&.
.PP
When the control or shift modifier is pressed the wheel delta ( divided by 120 ) is mapped to an increment according to \fBpageSteps()\fP\&. Otherwise it is mapped to \fBsingleSteps()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIevent\fP Wheel event 
.RE
.PP

.PP
Reimplemented in \fBQwtDial\fP\&.
.PP
Definition at line 296 of file qwt_abstract_slider\&.cpp\&.
.SS "bool QwtAbstractSlider::wrapping () const"

.PP
\fBReturns\fP
.RS 4
True, when wrapping is set 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetWrapping()\fP 
.RE
.PP

.PP
Definition at line 608 of file qwt_abstract_slider\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code\&.
