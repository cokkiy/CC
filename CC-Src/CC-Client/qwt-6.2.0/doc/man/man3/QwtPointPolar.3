.TH "QwtPointPolar" 3 "Sun Jul 18 2021" "Version 6.2.0" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtPointPolar \- A point in polar coordinates\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_point_polar\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtPointPolar\fP ()"
.br
.ti -1c
.RI "\fBQwtPointPolar\fP (double \fBazimuth\fP, double \fBradius\fP)"
.br
.ti -1c
.RI "\fBQwtPointPolar\fP (const QPointF &)"
.br
.ti -1c
.RI "void \fBsetPoint\fP (const QPointF &)"
.br
.ti -1c
.RI "QPointF \fBtoPoint\fP () const"
.br
.ti -1c
.RI "bool \fBisValid\fP () const"
.br
.RI "Returns true if \fBradius()\fP >= 0\&.0\&. "
.ti -1c
.RI "bool \fBisNull\fP () const"
.br
.RI "Returns true if \fBradius()\fP >= 0\&.0\&. "
.ti -1c
.RI "double \fBradius\fP () const"
.br
.RI "Returns the radius\&. "
.ti -1c
.RI "double \fBazimuth\fP () const"
.br
.RI "Returns the azimuth\&. "
.ti -1c
.RI "double & \fBrRadius\fP ()"
.br
.RI "Returns the radius\&. "
.ti -1c
.RI "double & \fBrAzimuth\fP ()"
.br
.RI "Returns the azimuth\&. "
.ti -1c
.RI "void \fBsetRadius\fP (double)"
.br
.RI "Sets the radius to radius\&. "
.ti -1c
.RI "void \fBsetAzimuth\fP (double)"
.br
.RI "Sets the azimuth to azimuth\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBQwtPointPolar\fP &) const"
.br
.RI "Compare 2 points\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBQwtPointPolar\fP &) const"
.br
.ti -1c
.RI "\fBQwtPointPolar\fP \fBnormalized\fP () const"
.br
.in -1c
.SH "Detailed Description"
.PP 
A point in polar coordinates\&. 

In polar coordinates a point is determined by an angle and a distance\&. See http://en.wikipedia.org/wiki/Polar_coordinate_system 
.PP
Definition at line 28 of file qwt_point_polar\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtPointPolar::QwtPointPolar ()\fC [inline]\fP"
Constructs a null point, with a radius and azimuth set to 0\&.0\&. 
.PP
\fBSee also\fP
.RS 4
QPointF::isNull() 
.RE
.PP

.PP
Definition at line 71 of file qwt_point_polar\&.h\&.
.SS "QwtPointPolar::QwtPointPolar (double azimuth, double radius)\fC [inline]\fP"
Constructs a point with coordinates specified by radius and azimuth\&.
.PP
\fBParameters\fP
.RS 4
\fIazimuth\fP Azimuth 
.br
\fIradius\fP Radius 
.RE
.PP

.PP
Definition at line 83 of file qwt_point_polar\&.h\&.
.SS "QwtPointPolar::QwtPointPolar (const QPointF & p)"
Convert and assign values from a point in Cartesian coordinates
.PP
\fBParameters\fP
.RS 4
\fIp\fP Point in Cartesian coordinates 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPoint()\fP, \fBtoPoint()\fP 
.RE
.PP

.PP
Definition at line 44 of file qwt_point_polar\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBQwtPointPolar\fP QwtPointPolar::normalized () const"
Normalize radius and azimuth
.PP
When the radius is < 0\&.0 it is set to 0\&.0\&. The azimuth is a value >= 0\&.0 and < 2 * M_PI\&.
.PP
\fBReturns\fP
.RS 4
Normalized point 
.RE
.PP

.PP
Definition at line 118 of file qwt_point_polar\&.cpp\&.
.SS "bool QwtPointPolar::operator!= (const \fBQwtPointPolar\fP & other) const"
Compare 2 points
.PP
Two points are equal to each other if radius and azimuth-coordinates are the same\&. Points are not equal, when the azimuth differs, but other\&.azimuth() == \fBazimuth()\fP % (2 * PI)\&.
.PP
\fBReturns\fP
.RS 4
True if the point is not equal to other; otherwise return false\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBnormalized()\fP 
.RE
.PP

.PP
Definition at line 105 of file qwt_point_polar\&.cpp\&.
.SS "bool QwtPointPolar::operator== (const \fBQwtPointPolar\fP & other) const"

.PP
Compare 2 points\&. Two points are equal to each other if radius and azimuth-coordinates are the same\&. Points are not equal, when the azimuth differs, but other\&.azimuth() == \fBazimuth()\fP % (2 * PI)\&.
.PP
\fBReturns\fP
.RS 4
True if the point is equal to other; otherwise return false\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBnormalized()\fP 
.RE
.PP

.PP
Definition at line 90 of file qwt_point_polar\&.cpp\&.
.SS "void QwtPointPolar::setPoint (const QPointF & p)"
Convert and assign values from a point in Cartesian coordinates 
.PP
\fBParameters\fP
.RS 4
\fIp\fP Point in Cartesian coordinates 
.RE
.PP

.PP
Definition at line 54 of file qwt_point_polar\&.cpp\&.
.SS "QPointF QwtPointPolar::toPoint () const"
Convert and return values in Cartesian coordinates
.PP
\fBReturns\fP
.RS 4
Converted point in Cartesian coordinates
.RE
.PP
\fBNote\fP
.RS 4
Invalid or null points will be returned as QPointF(0\&.0, 0\&.0) 
.RE
.PP
\fBSee also\fP
.RS 4
\fBisValid()\fP, \fBisNull()\fP 
.RE
.PP

.PP
Definition at line 68 of file qwt_point_polar\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code\&.
