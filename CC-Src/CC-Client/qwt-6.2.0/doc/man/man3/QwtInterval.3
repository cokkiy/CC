.TH "QwtInterval" 3 "Sun Jul 18 2021" "Version 6.2.0" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtInterval \- A class representing an interval\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_interval\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBBorderFlag\fP { \fBIncludeBorders\fP = 0x00, \fBExcludeMinimum\fP = 0x01, \fBExcludeMaximum\fP = 0x02, \fBExcludeBorders\fP = ExcludeMinimum | ExcludeMaximum }"
.br
.ti -1c
.RI "typedef QFlags< \fBBorderFlag\fP > \fBBorderFlags\fP"
.br
.RI "Border flags\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtInterval\fP ()"
.br
.RI "Default Constructor\&. "
.ti -1c
.RI "\fBQwtInterval\fP (double \fBminValue\fP, double \fBmaxValue\fP, \fBBorderFlags\fP=\fBIncludeBorders\fP)"
.br
.ti -1c
.RI "void \fBsetInterval\fP (double \fBminValue\fP, double \fBmaxValue\fP, \fBBorderFlags\fP=\fBIncludeBorders\fP)"
.br
.ti -1c
.RI "\fBQwtInterval\fP \fBnormalized\fP () const"
.br
.RI "Normalize the limits of the interval\&. "
.ti -1c
.RI "\fBQwtInterval\fP \fBinverted\fP () const"
.br
.ti -1c
.RI "\fBQwtInterval\fP \fBlimited\fP (double lowerBound, double upperBound) const"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBQwtInterval\fP &) const"
.br
.RI "Compare two intervals\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBQwtInterval\fP &) const"
.br
.RI "Compare two intervals\&. "
.ti -1c
.RI "void \fBsetBorderFlags\fP (\fBBorderFlags\fP)"
.br
.ti -1c
.RI "\fBBorderFlags\fP \fBborderFlags\fP () const"
.br
.ti -1c
.RI "double \fBminValue\fP () const"
.br
.ti -1c
.RI "double \fBmaxValue\fP () const"
.br
.ti -1c
.RI "double \fBwidth\fP () const"
.br
.RI "Return the width of an interval\&. "
.ti -1c
.RI "long double \fBwidthL\fP () const"
.br
.RI "Return the width of an interval as long double\&. "
.ti -1c
.RI "void \fBsetMinValue\fP (double)"
.br
.ti -1c
.RI "void \fBsetMaxValue\fP (double)"
.br
.ti -1c
.RI "bool \fBcontains\fP (double value) const"
.br
.ti -1c
.RI "bool \fBcontains\fP (const \fBQwtInterval\fP &) const"
.br
.ti -1c
.RI "bool \fBintersects\fP (const \fBQwtInterval\fP &) const"
.br
.RI "Test if two intervals overlap\&. "
.ti -1c
.RI "\fBQwtInterval\fP \fBintersect\fP (const \fBQwtInterval\fP &) const"
.br
.RI "Intersect 2 intervals\&. "
.ti -1c
.RI "\fBQwtInterval\fP \fBunite\fP (const \fBQwtInterval\fP &) const"
.br
.RI "Unite 2 intervals\&. "
.ti -1c
.RI "\fBQwtInterval\fP \fBoperator|\fP (const \fBQwtInterval\fP &) const"
.br
.ti -1c
.RI "\fBQwtInterval\fP \fBoperator&\fP (const \fBQwtInterval\fP &) const"
.br
.RI "Intersection of two intervals\&. "
.ti -1c
.RI "\fBQwtInterval\fP & \fBoperator|=\fP (const \fBQwtInterval\fP &)"
.br
.RI "Unite this interval with the given interval\&. "
.ti -1c
.RI "\fBQwtInterval\fP & \fBoperator&=\fP (const \fBQwtInterval\fP &)"
.br
.RI "Intersect this interval with the given interval\&. "
.ti -1c
.RI "\fBQwtInterval\fP \fBextend\fP (double value) const"
.br
.RI "Extend the interval\&. "
.ti -1c
.RI "\fBQwtInterval\fP \fBoperator|\fP (double) const"
.br
.ti -1c
.RI "\fBQwtInterval\fP & \fBoperator|=\fP (double)"
.br
.ti -1c
.RI "bool \fBisValid\fP () const"
.br
.ti -1c
.RI "bool \fBisNull\fP () const"
.br
.ti -1c
.RI "void \fBinvalidate\fP ()"
.br
.ti -1c
.RI "\fBQwtInterval\fP \fBsymmetrize\fP (double value) const"
.br
.in -1c
.SH "Detailed Description"
.PP 
A class representing an interval\&. 

The interval is represented by 2 doubles, the lower and the upper limit\&. 
.PP
Definition at line 22 of file qwt_interval\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef QFlags<\fBBorderFlag\fP > \fBQwtInterval::BorderFlags\fP"

.PP
Border flags\&. An ORed combination of \fBBorderFlag\fP values\&. 
.PP
Definition at line 45 of file qwt_interval\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtInterval::BorderFlag\fP"
Flag indicating if a border is included or excluded 
.PP
\fBSee also\fP
.RS 4
\fBsetBorderFlags()\fP, \fBborderFlags()\fP 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIIncludeBorders \fP\fP
Min/Max values are inside the interval\&. 
.TP
\fB\fIExcludeMinimum \fP\fP
Min value is not included in the interval\&. 
.TP
\fB\fIExcludeMaximum \fP\fP
Max value is not included in the interval\&. 
.TP
\fB\fIExcludeBorders \fP\fP
Min/Max values are not included in the interval\&. 
.PP
Definition at line 29 of file qwt_interval\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtInterval::QwtInterval ()\fC [inline]\fP"

.PP
Default Constructor\&. Creates an invalid interval [0\&.0, -1\&.0] 
.PP
\fBSee also\fP
.RS 4
\fBsetInterval()\fP, \fBisValid()\fP 
.RE
.PP

.PP
Definition at line 112 of file qwt_interval\&.h\&.
.SS "QwtInterval::QwtInterval (double minValue, double maxValue, \fBBorderFlags\fP borderFlags = \fC\fBIncludeBorders\fP\fP)\fC [inline]\fP"
Constructor
.PP
Build an interval with from min/max values
.PP
\fBParameters\fP
.RS 4
\fIminValue\fP Minimum value 
.br
\fImaxValue\fP Maximum value 
.br
\fIborderFlags\fP Include/Exclude borders 
.RE
.PP

.PP
Definition at line 128 of file qwt_interval\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBQwtInterval::BorderFlags\fP QwtInterval::borderFlags () const\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Border flags 
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetBorderFlags()\fP 
.RE
.PP

.PP
Definition at line 166 of file qwt_interval\&.h\&.
.SS "bool QwtInterval::contains (const \fBQwtInterval\fP & interval) const"
Test if an interval is inside an interval
.PP
\fBParameters\fP
.RS 4
\fIinterval\fP Interval 
.RE
.PP
\fBReturns\fP
.RS 4
true, if interval lies inside the boundaries 
.RE
.PP

.PP
Definition at line 90 of file qwt_interval\&.cpp\&.
.SS "bool QwtInterval::contains (double value) const"
Test if a value is inside an interval
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value 
.RE
.PP
\fBReturns\fP
.RS 4
true, if value lies inside the boundaries 
.RE
.PP

.PP
Definition at line 67 of file qwt_interval\&.cpp\&.
.SS "\fBQwtInterval\fP QwtInterval::extend (double value) const"

.PP
Extend the interval\&. If value is below \fBminValue()\fP, value becomes the lower limit\&. If value is above \fBmaxValue()\fP, value becomes the upper limit\&.
.PP
\fBextend()\fP has no effect for invalid intervals
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value 
.RE
.PP
\fBReturns\fP
.RS 4
extended interval
.RE
.PP
\fBSee also\fP
.RS 4
\fBisValid()\fP 
.RE
.PP

.PP
Definition at line 363 of file qwt_interval\&.cpp\&.
.SS "\fBQwtInterval\fP QwtInterval::intersect (const \fBQwtInterval\fP & other) const"

.PP
Intersect 2 intervals\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP Interval to be intersect with 
.RE
.PP
\fBReturns\fP
.RS 4
Intersection 
.RE
.PP

.PP
Definition at line 186 of file qwt_interval\&.cpp\&.
.SS "bool QwtInterval::intersects (const \fBQwtInterval\fP & other) const"

.PP
Test if two intervals overlap\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP Interval 
.RE
.PP
\fBReturns\fP
.RS 4
True, when the intervals are intersecting 
.RE
.PP

.PP
Definition at line 277 of file qwt_interval\&.cpp\&.
.SS "void QwtInterval::invalidate ()\fC [inline]\fP"
Invalidate the interval
.PP
The limits are set to interval [0\&.0, -1\&.0] 
.PP
\fBSee also\fP
.RS 4
\fBisValid()\fP 
.RE
.PP

.PP
Definition at line 325 of file qwt_interval\&.h\&.
.SS "\fBQwtInterval\fP QwtInterval::inverted () const"
Invert the limits of the interval 
.PP
\fBReturns\fP
.RS 4
Inverted interval 
.RE
.PP
\fBSee also\fP
.RS 4
\fBnormalized()\fP 
.RE
.PP

.PP
Definition at line 48 of file qwt_interval\&.cpp\&.
.SS "bool QwtInterval::isNull () const\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
true, if \fBisValid()\fP && (\fBminValue()\fP >= \fBmaxValue()\fP) 
.RE
.PP

.PP
Definition at line 314 of file qwt_interval\&.h\&.
.SS "bool QwtInterval::isValid () const\fC [inline]\fP"
A interval is valid when \fBminValue()\fP <= \fBmaxValue()\fP\&. In case of \fBQwtInterval::ExcludeBorders\fP it is true when \fBminValue()\fP < \fBmaxValue()\fP
.PP
\fBReturns\fP
.RS 4
True, when the interval is valid 
.RE
.PP

.PP
Definition at line 210 of file qwt_interval\&.h\&.
.SS "\fBQwtInterval\fP QwtInterval::limited (double lowerBound, double upperBound) const"
Limit the interval, keeping the border modes
.PP
\fBParameters\fP
.RS 4
\fIlowerBound\fP Lower limit 
.br
\fIupperBound\fP Upper limit
.RE
.PP
\fBReturns\fP
.RS 4
Limited interval 
.RE
.PP

.PP
Definition at line 336 of file qwt_interval\&.cpp\&.
.SS "double QwtInterval::maxValue () const\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Upper limit of the interval 
.RE
.PP

.PP
Definition at line 198 of file qwt_interval\&.h\&.
.SS "double QwtInterval::minValue () const\fC [inline]\fP"

.PP
\fBReturns\fP
.RS 4
Lower limit of the interval 
.RE
.PP

.PP
Definition at line 192 of file qwt_interval\&.h\&.
.SS "\fBQwtInterval\fP QwtInterval::normalized () const"

.PP
Normalize the limits of the interval\&. If \fBmaxValue()\fP < \fBminValue()\fP the limits will be inverted\&. 
.PP
\fBReturns\fP
.RS 4
Normalized interval
.RE
.PP
\fBSee also\fP
.RS 4
\fBisValid()\fP, \fBinverted()\fP 
.RE
.PP

.PP
Definition at line 29 of file qwt_interval\&.cpp\&.
.SS "bool QwtInterval::operator!= (const \fBQwtInterval\fP & other) const\fC [inline]\fP"

.PP
Compare two intervals\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP Interval to compare with 
.RE
.PP
\fBReturns\fP
.RS 4
True, when this and other are not equal 
.RE
.PP

.PP
Definition at line 296 of file qwt_interval\&.h\&.
.SS "\fBQwtInterval\fP QwtInterval::operator& (const \fBQwtInterval\fP & other) const\fC [inline]\fP"

.PP
Intersection of two intervals\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP Interval to intersect with 
.RE
.PP
\fBReturns\fP
.RS 4
Intersection of this and other
.RE
.PP
\fBSee also\fP
.RS 4
\fBintersect()\fP 
.RE
.PP

.PP
Definition at line 258 of file qwt_interval\&.h\&.
.SS "\fBQwtInterval\fP & QwtInterval::operator&= (const \fBQwtInterval\fP & other)"

.PP
Intersect this interval with the given interval\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP Interval to be intersected with 
.RE
.PP
\fBReturns\fP
.RS 4
This interval 
.RE
.PP

.PP
Definition at line 265 of file qwt_interval\&.cpp\&.
.SS "bool QwtInterval::operator== (const \fBQwtInterval\fP & other) const\fC [inline]\fP"

.PP
Compare two intervals\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP Interval to compare with 
.RE
.PP
\fBReturns\fP
.RS 4
True, when this and other are equal 
.RE
.PP

.PP
Definition at line 284 of file qwt_interval\&.h\&.
.SS "\fBQwtInterval\fP QwtInterval::operator| (const \fBQwtInterval\fP & other) const\fC [inline]\fP"
Union of two intervals
.PP
\fBParameters\fP
.RS 4
\fIother\fP Interval to unite with 
.RE
.PP
\fBReturns\fP
.RS 4
Union of this and other
.RE
.PP
\fBSee also\fP
.RS 4
\fBunite()\fP 
.RE
.PP

.PP
Definition at line 272 of file qwt_interval\&.h\&.
.SS "\fBQwtInterval\fP QwtInterval::operator| (double value) const\fC [inline]\fP"
Extend an interval
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value 
.RE
.PP
\fBReturns\fP
.RS 4
Extended interval 
.RE
.PP
\fBSee also\fP
.RS 4
\fBextend()\fP 
.RE
.PP

.PP
Definition at line 308 of file qwt_interval\&.h\&.
.SS "\fBQwtInterval\fP & QwtInterval::operator|= (const \fBQwtInterval\fP & other)"

.PP
Unite this interval with the given interval\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP Interval to be united with 
.RE
.PP
\fBReturns\fP
.RS 4
This interval 
.RE
.PP

.PP
Definition at line 253 of file qwt_interval\&.cpp\&.
.SS "\fBQwtInterval\fP & QwtInterval::operator|= (double value)"
Extend an interval
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Value 
.RE
.PP
\fBReturns\fP
.RS 4
Reference of the extended interval
.RE
.PP
\fBSee also\fP
.RS 4
\fBextend()\fP 
.RE
.PP

.PP
Definition at line 380 of file qwt_interval\&.cpp\&.
.SS "void QwtInterval::setBorderFlags (\fBBorderFlags\fP borderFlags)\fC [inline]\fP"
Change the border flags
.PP
\fBParameters\fP
.RS 4
\fIborderFlags\fP Or'd BorderMode flags 
.RE
.PP
\fBSee also\fP
.RS 4
\fBborderFlags()\fP 
.RE
.PP

.PP
Definition at line 157 of file qwt_interval\&.h\&.
.SS "void QwtInterval::setInterval (double minValue, double maxValue, \fBBorderFlags\fP borderFlags = \fC\fBIncludeBorders\fP\fP)\fC [inline]\fP"
Assign the limits of the interval
.PP
\fBParameters\fP
.RS 4
\fIminValue\fP Minimum value 
.br
\fImaxValue\fP Maximum value 
.br
\fIborderFlags\fP Include/Exclude borders 
.RE
.PP

.PP
Definition at line 143 of file qwt_interval\&.h\&.
.SS "void QwtInterval::setMaxValue (double maxValue)\fC [inline]\fP"
Assign the upper limit of the interval
.PP
\fBParameters\fP
.RS 4
\fImaxValue\fP Maximum value 
.RE
.PP

.PP
Definition at line 186 of file qwt_interval\&.h\&.
.SS "void QwtInterval::setMinValue (double minValue)\fC [inline]\fP"
Assign the lower limit of the interval
.PP
\fBParameters\fP
.RS 4
\fIminValue\fP Minimum value 
.RE
.PP

.PP
Definition at line 176 of file qwt_interval\&.h\&.
.SS "\fBQwtInterval\fP QwtInterval::symmetrize (double value) const"
Adjust the limit that is closer to value, so that value becomes the center of the interval\&.
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP Center 
.RE
.PP
\fBReturns\fP
.RS 4
Interval with value as center 
.RE
.PP

.PP
Definition at line 317 of file qwt_interval\&.cpp\&.
.SS "double QwtInterval::width () const\fC [inline]\fP"

.PP
Return the width of an interval\&. The width of invalid intervals is 0\&.0, otherwise the result is \fBmaxValue()\fP - \fBminValue()\fP\&.
.PP
\fBReturns\fP
.RS 4
Interval width 
.RE
.PP
\fBSee also\fP
.RS 4
\fBisValid()\fP 
.RE
.PP

.PP
Definition at line 227 of file qwt_interval\&.h\&.
.SS "long double QwtInterval::widthL () const\fC [inline]\fP"

.PP
Return the width of an interval as long double\&. The width of invalid intervals is 0\&.0, otherwise the result is \fBmaxValue()\fP - \fBminValue()\fP\&.
.PP
\fBReturns\fP
.RS 4
Interval width 
.RE
.PP
\fBSee also\fP
.RS 4
\fBisValid()\fP 
.RE
.PP

.PP
Definition at line 241 of file qwt_interval\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code\&.
